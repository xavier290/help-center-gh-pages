{"version":3,"sources":["main.2e3ce6f1.chunk.css","webpack://src/styling/base/_base.scss","webpack://src/styling/abstracts/_variables.scss","webpack://src/styling/base/_helpers.scss","webpack://src/styling/layout/_header.scss","webpack://src/styling/layout/_footer.scss","webpack://src/styling/pages/_index.scss","webpack://src/styling/abstracts/_breakpoints.scss","webpack://src/styling/responsive/_responsive.scss"],"names":[],"mappings":"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","file":"main.2e3ce6f1.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);\n*{padding:0;margin:0;box-sizing:border-box;font-family:\"Poppins\",sans-serif}li{display:list-item;list-style:none}li::marker{color:black}a{color:#000;text-decoration:none !important}.loader{width:100%;height:80vh;display:flex;flex-direction:column;align-items:center;justify-content:center}.clearfix::after{clear:both;content:\"\";display:table}.container-app{width:100%;min-height:100vh;position:relative}.container{padding-top:2%}.show{display:block !important}.menu{display:none}.menu .flex-column{margin-top:14vh;padding:2% 6% 2% 6%;position:-webkit-sticky;position:sticky;overflow-y:auto;flex-shrink:0;left:0%;z-index:2;width:100%;top:0%;min-height:100vh;background:#fff;display:flex;flex-direction:column;align-items:center}.menu .flex-column ul{width:100%}.menu .flex-column ul li{width:100%;padding:2%;margin-bottom:1px;background:#e9e9e9;text-align:left;font-size:16px}footer{display:flex;flex-direction:column;height:12vh;justify-content:center;text-align:center;background-color:#232e3d}footer p{color:#fff;font-size:14px}header{top:0%;left:0%;position:fixed;display:grid;width:100%;height:14vh;align-items:center;background:#fff;border-bottom:solid 2px #232e3d;z-index:4}header .logo{position:absolute;z-index:4;left:6%}header .menu-btn{position:absolute;display:flex;justify-content:center;align-items:center;width:30px;height:30px;cursor:pointer;transition:all 0.4s ease-in-out;right:6%;z-index:10}header .menu-btn-burguer{width:30px;height:5px;background:#000000;border-radius:5px}header .menu-btn-burguer::before,header .menu-btn-burguer::after{content:\"\";position:absolute;width:30px;height:5px;border-radius:5px;background:#000000;transition:all 0.4s ease-in-out}header .menu-btn-burguer::before{transform:translateY(-10px)}header .menu-btn-burguer::after{transform:translateY(10px)}header .menu-btn.open .menu-btn-burguer{transform:translateX(-50px);background:transparent;box-shadow:none}header .menu-btn.open .menu-btn-burguer::before{transform:rotate(45deg) translate(35px, -35px)}header .menu-btn.open .menu-btn-burguer::after{transform:rotate(-45deg) translate(35px, 35px)}.index{margin-top:14vh;width:100%;min-height:100vh}.index .search{background:#eeeeee;width:100%;height:35vh;background-position:center;background-repeat:no-repeat;display:flex;flex-direction:column;justify-content:center;padding:5%}.index .search h1{font-size:38px}.index .search form img{width:25px}.index .search form input{margin-top:16px;min-width:50px;height:38px;padding:8px 0 8px 30px;font-size:16px;border-radius:5px;background-repeat:no-repeat;background-size:20px;background-position:left 8px center;border:none;box-shadow:0 0 2px black}.index main{padding:5%}.index main h1{font-size:28px;margin-bottom:20px}.index main .main-content{display:flex;flex-wrap:wrap;perspective:1000px;width:100%;justify-content:center}.index main .main-content .box{width:100%;min-width:160px;height:100px;display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;box-shadow:0 0 2px black;margin:8px;border-radius:5px;transition:transform 0.4s}.index main .main-content .box a{display:block;width:100%;height:100%;display:flex;align-items:center;justify-content:center}.index main .main-content .box:hover{transform:scale(1.06)}@media (min-width: 768px){.index input{min-width:300px !important}}@media (min-width: 1024px){.search input{min-width:360px !important}}@media (min-width: 1024px){#menu{display:block !important}}@media (min-width: 320px){.box{max-width:305px !important}}@media (min-width: 768px){.box{max-width:220px !important}}@media (min-width: 1024px){.box{max-width:200px !important;margin:10px !important}.box a{font-size:16px}}@media (min-width: 1024px){.main-content{justify-content:left !important}}@media (min-width: 1024px){.flex-column li{padding:1% !important}}\n\n","* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  font-family: $text-font-stack;\r\n}\r\n\r\n//basic style for links\r\n\r\nli {\r\n  display: list-item;\r\n  list-style: none;\r\n}\r\n\r\nli::marker {\r\n  color: black;\r\n}\r\n\r\na {\r\n  color: $brand-color;\r\n  text-decoration: none !important;\r\n}\r\n\r\n.loader {\r\n  width: 100%;\r\n  height: 80vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n","/// @type List\r\n$text-font-stack: \"Poppins\", sans-serif !default;\r\n\r\n/// @type Color\r\n$brand-color: rgb(0, 0, 0) !default;\r\n\r\n/// @type Color\r\n$second-background-color: #232e3d !default;\r\n\r\n/// @type Color\r\n$link-color: #c8e1ff !default;\r\n\r\n/// @type Color\r\n$hover: #1f2936 !default;\r\n",".clearfix::after {\r\n  clear: both;\r\n  content: \"\";\r\n  display: table;\r\n}\r\n\r\n.container-app {\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  position: relative;\r\n}\r\n\r\n.container {\r\n  padding-top: 2%;\r\n}\r\n",".show {\r\n  display: block !important;\r\n}\r\n\r\n.menu {\r\n  display: none;\r\n\r\n  .flex-column {\r\n    margin-top: 14vh;\r\n    padding: 2% 6% 2% 6%;\r\n    position: sticky;\r\n    overflow-y: auto;\r\n    flex-shrink: 0;\r\n    left: 0%;\r\n    z-index: 2;\r\n    width: 100%;\r\n    top: 0%;\r\n    min-height: 100vh;\r\n    background: #fff;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    ul {\r\n      width: 100%;\r\n\r\n      li {\r\n        width: 100%;\r\n        padding: 2%;\r\n        margin-bottom: 1px;\r\n        background: rgb(233, 233, 233);\r\n        text-align: left;\r\n        font-size: 16px;\r\n      }\r\n    }\r\n  }\r\n}\r\n","footer {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 12vh;\r\n  justify-content: center;\r\n  text-align: center;\r\n  background-color: $second-background-color;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-size: 14px;\r\n  }\r\n}\r\n","header {\r\n  top: 0%;\r\n  left: 0%;\r\n  position: fixed;\r\n  display: grid;\r\n  width: 100%;\r\n  height: 14vh;\r\n  align-items: center;\r\n  background: #fff;\r\n  border-bottom: solid 2px $second-background-color;\r\n  z-index: 4;\r\n\r\n  .logo {\r\n    position: absolute;\r\n    z-index: 4;\r\n    left: 6%;\r\n  }\r\n\r\n  .menu-btn {\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 30px;\r\n    height: 30px;\r\n    cursor: pointer;\r\n    transition: all 0.4s ease-in-out;\r\n    right: 6%;\r\n    z-index: 10;\r\n  }\r\n  .menu-btn-burguer {\r\n    width: 30px;\r\n    height: 5px;\r\n    background: #000000;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  .menu-btn-burguer::before,\r\n  .menu-btn-burguer::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 30px;\r\n    height: 5px;\r\n    border-radius: 5px;\r\n    background: #000000;\r\n    transition: all 0.4s ease-in-out;\r\n  }\r\n\r\n  .menu-btn-burguer::before {\r\n    transform: translateY(-10px);\r\n  }\r\n\r\n  .menu-btn-burguer::after {\r\n    transform: translateY(10px);\r\n  }\r\n\r\n  .menu-btn.open .menu-btn-burguer {\r\n    transform: translateX(-50px);\r\n    background: transparent;\r\n    box-shadow: none;\r\n  }\r\n\r\n  .menu-btn.open .menu-btn-burguer::before {\r\n    transform: rotate(45deg) translate(35px, -35px);\r\n  }\r\n\r\n  .menu-btn.open .menu-btn-burguer::after {\r\n    transform: rotate(-45deg) translate(35px, 35px);\r\n  }\r\n}\r\n\r\n.index {\r\n  margin-top: 14vh;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  .search {\r\n    background: #eeeeee;\r\n    width: 100%;\r\n    height: 35vh;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    padding: 5%;\r\n\r\n    h1 {\r\n      font-size: 38px;\r\n    }\r\n\r\n    form {\r\n      img {\r\n        width: 25px;\r\n      }\r\n      input {\r\n        margin-top: 16px;\r\n        min-width: 50px;\r\n        height: 38px;\r\n        padding: 8px 0 8px 30px;\r\n        font-size: 16px;\r\n        border-radius: 5px;\r\n        background-repeat: no-repeat;\r\n        background-size: 20px;\r\n        background-position: left 8px center;\r\n        border: none;\r\n        box-shadow: 0 0 2px black;\r\n      }\r\n    }\r\n  }\r\n  main {\r\n    padding: 5%;\r\n    h1 {\r\n      font-size: 28px;\r\n      margin-bottom: 20px;\r\n    }\r\n    .main-content {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      perspective: 1000px;\r\n      width: 100%;\r\n      justify-content: center;\r\n\r\n      .box {\r\n        width: 100%;\r\n        min-width: 160px;\r\n        height: 100px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n        box-shadow: 0 0 2px black;\r\n        margin: 8px;\r\n        border-radius: 5px;\r\n        transition: transform 0.4s;\r\n\r\n        a {\r\n          display: block;\r\n          width: 100%;\r\n          height: 100%;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n        }\r\n      }\r\n      .box:hover {\r\n        transform: scale(1.06);\r\n      }\r\n    }\r\n  }\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Kitty Giraudel (@kittygiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  \"phone\": 320px,\r\n  \"tablet\": 768px,\r\n  \"desktop\": 1024px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  \"screen\": \"screen\",\r\n  \"print\": \"print\",\r\n  \"handheld\": \"handheld\",\r\n  \"landscape\": \"(orientation: landscape)\",\r\n  \"portrait\": \"(orientation: portrait)\",\r\n  \"retina2x\":\r\n    \"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\r\n  \"retina3x\":\r\n    \"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  \"px\": 1,\r\n  \"em\": 0.01,\r\n  \"rem\": 0.1,\r\n  \"\": 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: \"desktop\" !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists(\"at-error\") {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {\r\n  }\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\r\n    }\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\r\n        ($prefix == \"min\" and $value > $no-media-breakpoint-value)\r\n      {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log(\"No operator found in `#{$expression}`.\");\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: \"width\";\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log(\"Unknown unit `#{unit($value)}`.\");\r\n  }\r\n\r\n  @if $operator == \">\" {\r\n    $value: $value + $interval;\r\n  } @else if $operator == \"<\" {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return \"(#{$prefix}-#{$dimension}: #{$value})\";\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == \"number\" {\r\n    @return $value;\r\n  } @else if type-of($value) != \"string\" {\r\n    $_: im-log(\"Value for `to-number` should be a number or a string.\");\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == \"-\");\r\n  $numbers: (\r\n    \"0\": 0,\r\n    \"1\": 1,\r\n    \"2\": 2,\r\n    \"3\": 3,\r\n    \"4\": 4,\r\n    \"5\": 5,\r\n    \"6\": 6,\r\n    \"7\": 7,\r\n    \"8\": 8,\r\n    \"9\": 9,\r\n  );\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == \"+\" or $first-character == \"-\") {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not(index(map-keys($numbers), $character) or $character == \".\") {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n    }\r\n\r\n    @if $character == \".\" {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: (\r\n    \"px\": 1px,\r\n    \"cm\": 1cm,\r\n    \"mm\": 1mm,\r\n    \"%\": 1%,\r\n    \"ch\": 1ch,\r\n    \"pc\": 1pc,\r\n    \"in\": 1in,\r\n    \"em\": 1em,\r\n    \"rem\": 1rem,\r\n    \"pt\": 1pt,\r\n    \"ex\": 1ex,\r\n    \"vw\": 1vw,\r\n    \"vh\": 1vh,\r\n    \"vmin\": 1vmin,\r\n    \"vmax\": 1vmax,\r\n  );\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log(\"Invalid unit `#{$unit}`.\");\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge(\r\n    $media-expressions,\r\n    $tweak-media-expressions\r\n  ) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n  {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".index {\r\n  @include media(\">=tablet\") {\r\n    input {\r\n      min-width: 300px !important;\r\n    }\r\n  }\r\n}\r\n\r\n.search {\r\n  @include media(\">=desktop\") {\r\n    input {\r\n      min-width: 360px !important;\r\n    }\r\n  }\r\n}\r\n\r\n#menu {\r\n  @include media(\">=desktop\") {\r\n    display: block !important;\r\n  }\r\n}\r\n\r\n.box {\r\n  @include media(\">=phone\") {\r\n    max-width: 305px !important;\r\n  }\r\n}\r\n\r\n.box {\r\n  @include media(\">=tablet\") {\r\n    max-width: 220px !important;\r\n  }\r\n}\r\n\r\n.box {\r\n  @include media(\">=desktop\") {\r\n    max-width: 200px !important;\r\n    margin: 10px !important;\r\n\r\n    a {\r\n      font-size: 16px;\r\n    }\r\n  }\r\n}\r\n\r\n.main-content {\r\n  @include media(\">=desktop\") {\r\n    justify-content: left !important;\r\n  }\r\n}\r\n\r\n.flex-column {\r\n  @include media(\">=desktop\") {\r\n    li {\r\n      padding: 1% !important;\r\n    }\r\n  }\r\n}\r\n"]}